apply plugin: "application"
apply plugin: "jacoco"
apply plugin: "java"

allprojects {
	apply plugin: "java"
	apply plugin: "idea"
	apply plugin: "jacoco"
	if (project.hasProperty("conquer.localJVM") && "true" == project.getProperties().get("conquer.localJVM").toString().toLowerCase()) {
		java {
			toolchain {
				languageVersion = JavaLanguageVersion.of("${javaversion}")
			}
		}
	} else {
		gradle.projectsEvaluated {
			tasks.withType(JavaCompile) {
				options.compilerArgs << "--source" << "${javaversion}"
			}
			tasks.withType(JavaExec) {
				jvmArgs += ["--enable-preview", "-Duser.home=tmp"]
			}
			tasks.withType(Test) {
				jvmArgs += ["--enable-preview", "-Duser.home=tmp"]
			}
		}

	}
	application {
		applicationDefaultJvmArgs = ["--enable-preview"]
	}
	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}
	repositories {
		mavenCentral()
	}
	task configureEnvironment() {
		def envVars = [:]
		envVars["SOURCE_DATE_EPOCH"] = "0"
		tasks.withType(Exec) { environment << envVars }
	}
	assemble.dependsOn(configureEnvironment)
	dependencies {
		testImplementation("org.junit.jupiter:junit-jupiter:5.6.0")
	}
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "--enable-preview" << "-g"
			options.fork = true
			options.incremental = true
		}
		tasks.withType(JavaExec) {
			jvmArgs += ["--enable-preview", "-Duser.home=tmp"]
		}
		tasks.withType(Test) {
			jvmArgs += ["--enable-preview", "-Duser.home=tmp"]
		}
	}
	jacocoTestReport {
		reports {
			xml.enabled true
			html.enabled true
		}
	}
	idea {
		module {
			languageLevel = new org.gradle.plugins.ide.idea.model.IdeaLanguageLevel("JDK_16_PREVIEW")
		}
	}
}
task createZipFileForDistribution(type: Zip) {
	archiveFileName = "Conquer-SDK_${conquerVersion}.zip"
	destinationDirectory = file(".")
	from "dist"
}
idea {
	project {
		languageLevel = "JDK_16_PREVIEW"
	}
}
task copyFiles() {
	doLast {
		mkdir "dist"
		copy {
			from("Conquer/build/libs",) {
				include "*.jar"
			}
			from("ConquerFrontendSPI/build/libs") {
				include "*.jar"
			}
			from("auxiliary") {
				include "*.pom"
				include "install-sdk.sh"
				include "install.bat"
				include "scenario-builder"
				include "scenario-builder.bat"
				include "README.txt"
			}
			from("depreview") {
				include "depreview.exe"
				include "depreview"
			}
			into "dist"
		}
		copy {
			from "${project.rootDir}/ScenarioGenerator/build/libs"
			include "shaded-tool.jar-all.jar"
			into "dist"
			rename { a -> a.replace("shaded-tool.jar-all.jar", "scenario-builder.jar") }
		}
		exec {
			commandLine file(".").getAbsolutePath() + "/dist/depreview", file(".").getAbsolutePath() + "/dist/scenario-builder.jar"
		}
	}
}
copyFiles.dependsOn(":Conquer:jar")
copyFiles.dependsOn(":ConquerFrontendSPI:jar")
copyFiles.dependsOn(":Conquer:conquerResources")
copyFiles.dependsOn(":depreview:buildExecutable")
copyFiles.dependsOn(":ScenarioGenerator:shadowJar")
copyFiles.mustRunAfter(":ScenarioGenerator:shadowJar")
createZipFileForDistribution.dependsOn(copyFiles)
assemble.mustRunAfter(":music:buildMusic")
assemble.dependsOn(":depreview:buildExecutable")
clean {
	delete "dist"
	delete "Conquer-SDK_${conquerVersion}.zip"
}
tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}
